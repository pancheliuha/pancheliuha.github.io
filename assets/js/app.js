!function e(t,s,a){function i(o,r){if(!s[o]){if(!t[o]){var l="function"==typeof require&&require;if(!r&&l)return l(o,!0);if(n)return n(o,!0);throw new Error("Cannot find module '"+o+"'")}var c=s[o]={exports:{}};t[o][0].call(c.exports,function(e){var s=t[o][1][e];return i(s?s:e)},c,c.exports,e,t,s,a)}return s[o].exports}for(var n="function"==typeof require&&require,o=0;o<a.length;o++)i(a[o]);return i}({1:[function(e,t,s){!function(t){"use strict";function s(){var e=(t(".talks").width(),t(".feedback__background-blur")),s=t(".talks"),a=s.offset().top-e.offset().top,i=s.offset().left-e.offset().left;e.css({"background-position":i+"px "+a+"px"})}var a=(e("./modules/main-menu")()(),e("./modules/scroll-events")(),e("./modules/paralax-main")(),e("./modules/anchors")(),e("./modules/preloader"));e("./modules/slider")(),e("./modules/skills")(),e("./modules/map")(),e("./modules/form-validation")();if(t(".welcome-header__button").on("click",function(){var e=t(this);t(".flip-container").toggleClass("flipped"),e.fadeOut(300)}),t(".about-card__back__nav__item:first-child").on("click",function(e){e.preventDefault(),t(".flip-container").toggleClass("flipped"),t(".welcome-header__button").fadeIn(300)}),t(".about-card__back__nav__item:last-child").on("click",function(e){e.preventDefault(),t("#about-card__form").submit()}),t(".feedback__background-blur").length&&(t(window).resize(function(){s()}),t(window).on("load",function(){s()})),t(".articles-links").length){var i=(t("div.articles-links:before"),t("div.articles-links"));i.click(function(){t(this).toggleClass("active")})}a()}(jQuery)},{"./modules/anchors":2,"./modules/form-validation":3,"./modules/main-menu":4,"./modules/map":5,"./modules/paralax-main":6,"./modules/preloader":7,"./modules/scroll-events":8,"./modules/skills":9,"./modules/slider":10}],2:[function(e,t,s){t.exports=function(){function e(e){e.preventDefault(),$("body, html").animate({scrollTop:a||o},1e3)}function t(e){$("body, html").animate({scrollTop:0},1200)}function s(e){e.preventDefault();var t=$(this).attr("href"),s=$(t).offset().top;console.log(s),$("body, html").animate({scrollTop:s},650)}if($("#mainSection").length){var a,i=$('a[href="#mainSection"]'),n=$(".icon_arrow_up"),o=$("#mainSection").offset().top,r=$(".aside__link");$(window).resize(function(){a=$("#mainSection").offset().top}),i.on("click",e),n.on("click",t),r.on("click",s)}}},{}],3:[function(e,t,s){t.exports=function(){function e(e){function t(){n.removeClass("rollIn").addClass("rollOut"),a.fadeOut(700,function(){n.css("display","none"),a.css("display","none")})}var s,a=$(".popup__overlay"),e=e,i=$(".popup__inner").find(".popup__close"),n=$(".popup__inner");n.find(".popup__text").html(e),a.fadeIn(400,function(){n.hasClass("rollOut")&&n.removeClass("rollOut"),n.css("display","block").addClass("rollIn"),a.css("display","block")}),i.click(function(){t(),s&&clearTimeout(s)}),s=setTimeout(t,3e3)}$("#formFeedback").length&&($("input#name, input#email, textarea#message").unbind().on("keyup blur",function(e){var t=$(this).attr("id"),s=$(this).val(),a=$(this).next(".error-tooltip");switch($(this).hasClass("valid")||$(this).hasClass("error")||$(this).addClass("error"),a.hasClass("show")&&a.removeClass("show").addClass("hide"),t){case"name":var i=/^[a-zA-Zа-яА-ЯІіЇїЄєҐґ]+$/;s.length>2&&""!=s&&i.test(s)?$(this).removeClass("error").addClass("valid"):$(this).removeClass("valid").addClass("error"),0==s.length&&$(this).removeClass("error");break;case"email":var n=/^([a-zA-Z0-9_.-])+@([a-zA-Z0-9_.-])+\.([a-zA-Z])+([a-zA-Z])+/;""!=s&&n.test(s)?$(this).removeClass("error").addClass("valid"):$(this).removeClass("valid").addClass("error"),0==s.length&&$(this).removeClass("error");break;case"message":s.length>5&&s.length<1e3?$(this).removeClass("error").addClass("valid"):$(this).removeClass("valid").addClass("error"),0==s.length&&$(this).removeClass("error")}}),$("#reset").click(function(e){$("#formFeedback").find(".error, .valid").each(function(){$(this).hasClass("error")&&$(this).removeClass("error"),$(this).hasClass("valid")&&$(this).removeClass("valid")}),$(".error-tooltip").hasClass("show")&&$(".error-tooltip").removeClass("show")}),$("form#formFeedback").submit(function(t){t.preventDefault(),3==$(".valid").length?$.ajax({url:"send.php",type:"POST",data:$(this).serialize(),beforeSend:function(e,t){$("form#formFeedback:input").attr("disabled","disabled")},success:function(t){$("form#formFeedback:input").removeAttr("disabled"),e("Данные отправлены"),console.log(t)},error:function(t){$("form#formFeedback:input").removeAttr("disabled"),e("Ошибка ответа от сервера"),console.log(t)}}):(e("Пожалуйста, проверьте корректность введенных данных"),$("input#name, input#email, textarea#message").each(function(){$(this).hasClass("valid")||$(this).hasClass("error")||$(this).addClass("error"),$(this).hasClass("error")&&$(this).next(".error-tooltip").addClass("show")}))}))}},{}],4:[function(e,t,s){t.exports=function(){var e=$(".hamburger"),t=$(".menu"),s=$(".header__top"),a=document.location.href;return function(){e.on("click",function(){$(this).toggleClass("active"),t.toggleClass("active").find(".menu__nav__item").each(function(e){e>0?$(this).css("transition-duration",.3+e/10+"s"):$(this).css("transition-duration","0.3s")}),s.toggleClass("active")}),$.each($(".menu__nav__link"),function(){this.href==a&&$(this).addClass("active")})}}},{}],5:[function(e,t,s){t.exports=function(){function e(){var e=50.4547,s=30.450409,a=15,i="#228475",n="#ffffff",o=10,r="assets/img/map_marker.svg",l=[{elementType:"labels",stylers:[{saturation:o}]},{featureType:"poi",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"road.highway",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"geometry",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"landscape",elementType:"geometry",stylers:[{color:n},{lightness:0},{saturation:o}]},{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:i},{lightness:0}]},{featureType:"poi",elementType:"geometry",stylers:[{color:n},{visibility:"on"},{lightness:0},{saturation:o}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#dddddd"},{visibility:"on"},{lightness:0},{saturation:o}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#aaaaaa"},{lightness:-30}]},{featureType:"water",elementType:"geometry",stylers:[{color:i},{lightness:30}]},{featureType:"water",elementType:"labels",stylers:[{color:"#aaaaaa"},{lightness:-30}]}],c={center:new google.maps.LatLng(e,s),zoom:a,panControl:!1,zoomControl:!1,mapTypeControl:!1,streetViewControl:!1,mapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,styles:l};t=new google.maps.Map(document.getElementById("map__block"),c);new google.maps.Marker({position:new google.maps.LatLng(50.449824,30.453409),map:t,zoom:17,icon:r,title:"I'm here!"})}var t;$(".map").length&&(google.maps.event.addDomListener(window,"load",e),$(".icon_map_marker").parents(".contacts__link").on("click",function(e){e.preventDefault(),t.panTo({lat:50.4547,lng:30.450409}),t.setZoom(15)}))}},{}],6:[function(e,t,s){t.exports=function(){$(document).ready(function(){var e=$(".parallax__mouse-move").find(".layer");e.map(function(e,t){var s=window.innerHeight/2*(e/100);$(t).css({bottom:"-"+s+"px"})}),$(window).on("mousemove",function(t){var s=t.pageX,a=t.pageY,i=window.innerWidth/2-s,n=window.innerHeight/2-a;e.map(function(e,t){var s=(window.innerHeight/2*(e/100),i*(e/180)),a=n*(e/180);$(t).css({transform:"translate3d("+s+"px, "+a+"px, 0)"})})})})}},{}],7:[function(e,t,s){t.exports=function(){$(window).load(function(){var e=$(".preloader");e.fadeOut(800)})}},{}],8:[function(e,t,s){t.exports=function(){$(window).scroll(function(){function e(){function e(e,t){var s=-t+"%",a="translate3d(0,"+s+",0)";e.css({transform:a})}a.map(function(t,a){var i=s/(45-3.4*t);e($(a),i)}),e(n,s/20),e(i,s/3)}function t(e,t,a){s>t-$(window).height()-200&&e.addClass(a)}var s=$(window).scrollTop(),a=$(".parallax__scroll").find(".layer"),i=$(".header__content"),n=$(".portfolio-svg-wrap"),o=parseInt($(".header-wrap").css("height")),r=$(".articles-links"),l=$(".articles-content").find(".article");if(e(),$(window).resize(function(){o=$(".header-wrap").css("height")}),s>o?r.addClass("fixed"):r.hasClass("fixed")&&s<o&&r.removeClass("fixed"),$.each(l,function(e,t){var a=$(this),i=a.offset().top,n=i+a.outerHeight(),o="#"+a.attr("id"),r=$("a[href='"+o+"']");s+1>=i&&s+1<=n?r.hasClass("active")||r.addClass("active"):r.removeClass("active")}),$(".talks").length){var c=$(".talks"),d=c.find(".talks__header"),f=c.find(".talks__content"),u=d.offset().top,p=f.offset().top;t(d,u,"fadeInFromBottom"),t(f,p,"fadeInFromBottom")}})}},{}],9:[function(e,t,s){t.exports=function(){$(".skill__wrap").length&&$(window).scroll(function(){var e=($(".skill__wrap"),$(".skill__list")),t=$(window).scrollTop();$.each(e,function(e,s){var a=$(this);if(t>a.offset().top-$(window).innerHeight()-250){a.parents(".skill__wrap").addClass("active");var i=a.children(".skill__item").find("svg").children("circle:last-child"),n=-1,o=0,r=function(){if(n!=i.length-1){++n,o+=200;var e=314-$(i[n]).data("percent")/100*314;a.children(".skill__item").delay(o).animate({opacity:"1"},500,"linear"),$(i[n]).delay(o).animate({"stroke-dashoffset":e+""},1300,"swing"),r()}};r()}})})}},{}],10:[function(e,t,s){t.exports=function(){function e(e){var a=t(e);s(a)}function t(e){function t(e,t){e.animate(t,400)}function s(e,t,s,a){e.animate(s,400,function(){t.removeClass("active").css(a),$(this).addClass("active"),n.removeAttr("disabled"),i.removeAttr("disabled")})}"slider__nav-item slider__nav-item_left"==e.currentTarget.className?$.each(m,function(e){++m[e],m[e]>r.length-1&&(m[e]=0)}):$.each(m,function(e){--m[e],m[e]<0&&(m[e]=r.length-1)}),n.attr("disabled","disabled"),i.attr("disabled","disabled");var o=a.find(".slider__item.right.active"),f=a.find(".slider__item.left.active"),u=a.find(".slider__item.slideshow.active"),p=a.find(".slider-inner.active"),w=r.eq(m[0]),b=l.eq(m[1]),C=c.eq(m[2]),k=d.eq(m[2]);return t(o,h),t(f,v),t(u,g),t(p,g),s(w,o,_,v),s(b,f,_,h),s(k,p,y,g),s(C,u,y,g),k}function s(e){function t(e,t,s){function a(){var t=n.eq(o);t.addClass("active"),o++,e.length!=o&&("undefined"!=typeof i&&clearTimeout(i),i=setTimeout(a,r))}s.html(""),e.forEach(function(s,a){var i='<span class="letter-span">'+s+"</span>";0==a&&(i='<span class="word-span">'+i)," "!=s&&"&nbsp;"!=s||(i='</span><span class="letter-span_space"> </span><span class="word-span">'),a==e.length-1&&(i+="</span>"),t+=i}),s.html(t);var i,n=s.find(".letter-span"),o=0,r=800/e.length;a()}var s=e,a=s.find(".slider__description-text"),i=s.find(".slider__technologies"),n=a.text().trim(),o=i.text().trim(),r=n.split(""),l=o.split(""),c="",d="";t(r,c,a),t(l,d,i)}var a=$(".slider"),i=$(".slider__nav-item_left"),n=$(".slider__nav-item_right"),o=$(".slider__project-image"),r=i.find(".slider__item.left"),l=n.find(".slider__item.right"),c=o.find(".slider__item.slideshow"),d=a.find(".slider-inner"),f=2,u=0,p=1,m=[f,u,p],h={top:"-100%"},v={top:"100%"},_={top:"0"},g={opacity:"0"},y={opacity:"1"};n.on("click",e),i.on("click",e)}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
